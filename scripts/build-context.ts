#!/usr/bin/env bun
/**
 * Build-time script to bundle opentool documentation and examples
 * into a static TypeScript file for use in AI code generators.
 *
 * Usage:
 *   bun run scripts/build-context.ts
 *
 * Output:
 *   dist/opentool-context.ts (copy this to your deployment system)
 */

import * as fs from "fs";
import * as path from "path";

const ROOT_DIR = path.resolve(__dirname, "..");
const OUTPUT_FILE = path.join(ROOT_DIR, "dist/opentool-context.ts");

function loadFile(filePath: string): string {
  try {
    return fs.readFileSync(filePath, "utf-8");
  } catch (error) {
    console.warn(`‚ö†Ô∏è  Failed to load ${filePath}`);
    return "";
  }
}

function loadDirectory(dirPath: string, extension: string = ".ts"): Record<string, string> {
  const files: Record<string, string> = {};

  if (!fs.existsSync(dirPath)) {
    console.warn(`‚ö†Ô∏è  Directory not found: ${dirPath}`);
    return files;
  }

  const entries = fs.readdirSync(dirPath, { withFileTypes: true });

  for (const entry of entries) {
    if (entry.isFile() && entry.name.endsWith(extension)) {
      const filePath = path.join(dirPath, entry.name);
      files[entry.name] = loadFile(filePath);
    } else if (entry.isDirectory() && entry.name !== "node_modules") {
      const subDir = path.join(dirPath, entry.name);
      const subFiles = loadDirectory(subDir, extension);
      for (const [name, content] of Object.entries(subFiles)) {
        files[`${entry.name}/${name}`] = content;
      }
    }
  }

  return files;
}

function escapeForTemplate(str: string): string {
  return str
    .replace(/\\/g, "\\\\")
    .replace(/`/g, "\\`")
    .replace(/\${/g, "\\${");
}

function main() {
  console.log("üì¶ Building opentool context bundle...\n");

  const readme = loadFile(path.join(ROOT_DIR, "README.md"));
  const metadataGuide = loadFile(path.join(ROOT_DIR, "METADATA.md"));
  const examples = loadDirectory(path.join(ROOT_DIR, "examples/full-metadata/tools"));
  const walletSource = loadDirectory(path.join(ROOT_DIR, "src/wallets"));

  console.log(`‚úì Loaded README.md (${readme.length} bytes)`);
  console.log(`‚úì Loaded METADATA.md (${metadataGuide.length} bytes)`);
  console.log(`‚úì Loaded ${Object.keys(examples).length} example tools`);
  console.log(`‚úì Loaded ${Object.keys(walletSource).length} wallet source files\n`);

  const output = `/**
 * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
 *
 * Generated by: opentool/scripts/build-context.ts
 * Generated at: ${new Date().toISOString()}
 *
 * This file contains bundled opentool documentation, examples, and source code
 * for use by AI code generators. It provides complete context about the opentool
 * framework without requiring runtime file system access.
 *
 * To regenerate: cd opentool && bun run scripts/build-context.ts
 * To use: Copy this file to your deployment system and import getOpenToolContext()
 */

export const OPENTOOL_VERSION = "0.6.0";

export const OPENTOOL_README = \`${escapeForTemplate(readme)}\`;

export const OPENTOOL_METADATA_GUIDE = \`${escapeForTemplate(metadataGuide)}\`;

export const OPENTOOL_EXAMPLES: Record<string, string> = {
${Object.entries(examples).map(([name, content]) =>
  `  ${JSON.stringify(name)}: \`${escapeForTemplate(content)}\`,`
).join("\n")}
};

export const OPENTOOL_WALLET_SOURCE: Record<string, string> = {
${Object.entries(walletSource).map(([name, content]) =>
  `  ${JSON.stringify(`src/wallets/${name}`)}: \`${escapeForTemplate(content)}\`,`
).join("\n")}
};

/**
 * Get formatted context prompt for AI code generation
 *
 * This function returns a comprehensive prompt containing all opentool
 * documentation, working examples, and source code that an AI model
 * should use as authoritative reference when generating opentool code.
 */
export function getOpenToolContext(): string {
  const sections: string[] = [];

  sections.push("# OPENTOOL FRAMEWORK - COMPLETE DOCUMENTATION AND SOURCE");
  sections.push("");
  sections.push("You have access to the complete opentool v" + OPENTOOL_VERSION + " framework.");
  sections.push("This includes documentation, working examples, and source code.");
  sections.push("Use these as your AUTHORITATIVE reference. Follow the patterns EXACTLY.");
  sections.push("");

  sections.push("## README.md - Framework Overview");
  sections.push("");
  sections.push(OPENTOOL_README);
  sections.push("");

  sections.push("## METADATA.md - Metadata and Payment System");
  sections.push("");
  sections.push(OPENTOOL_METADATA_GUIDE);
  sections.push("");

  sections.push("## WORKING EXAMPLES FROM PRODUCTION");
  sections.push("");
  sections.push("These are real, tested, working examples from the opentool repository.");
  sections.push("Follow these patterns EXACTLY when generating code.");
  sections.push("");

  for (const [filename, content] of Object.entries(OPENTOOL_EXAMPLES)) {
    sections.push(\`### examples/full-metadata/tools/\${filename}\`);
    sections.push("\\\`\\\`\\\`typescript");
    sections.push(content);
    sections.push("\\\`\\\`\\\`");
    sections.push("");
  }

  sections.push("## WALLET API SOURCE CODE");
  sections.push("");
  sections.push("Complete wallet implementation showing exact function signatures, types, and usage.");
  sections.push("THIS IS THE AUTHORITATIVE API - use exactly as shown here.");
  sections.push("");

  for (const [filename, content] of Object.entries(OPENTOOL_WALLET_SOURCE)) {
    sections.push(\`### \${filename}\`);
    sections.push("\\\`\\\`\\\`typescript");
    sections.push(content);
    sections.push("\\\`\\\`\\\`");
    sections.push("");
  }

  sections.push("## KEY PATTERNS TO FOLLOW");
  sections.push("");
  sections.push("### Wallet Usage (CORRECT):");
  sections.push("\\\`\\\`\\\`typescript");
  sections.push("import { wallet } from 'opentool/wallet';");
  sections.push("");
  sections.push("const context = await wallet({");
  sections.push("  chain: 'base-sepolia',");
  sections.push("  apiKey: process.env.ALCHEMY_API_KEY,");
  sections.push("  turnkey: {");
  sections.push("    organizationId: process.env.TURNKEY_SUBORG_ID!,");
  sections.push("    apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY!,");
  sections.push("    apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY!,");
  sections.push("    signWith: process.env.TURNKEY_WALLET_ADDRESS as \`0x\${string}\`,");
  sections.push("  },");
  sections.push("});");
  sections.push("");
  sections.push("const balance = await context.getNativeBalance();");
  sections.push("const txHash = await context.transfer({ to, amount });");
  sections.push("\\\`\\\`\\\`");
  sections.push("");
  sections.push("### HTTP Handler Pattern:");
  sections.push("\\\`\\\`\\\`typescript");
  sections.push("import { z } from 'zod';");
  sections.push("");
  sections.push("export const schema = z.object({");
  sections.push("  // input parameters");
  sections.push("});");
  sections.push("");
  sections.push("export const metadata = {");
  sections.push("  name: 'tool-name',");
  sections.push("  description: 'Tool description',");
  sections.push("};");
  sections.push("");
  sections.push("export async function POST(request: Request) {");
  sections.push("  const payload = await request.json();");
  sections.push("  const params = schema.parse(payload);");
  sections.push("  ");
  sections.push("  // implement tool logic");
  sections.push("  ");
  sections.push("  return Response.json({ result: 'success' });");
  sections.push("}");
  sections.push("\\\`\\\`\\\`");
  sections.push("");

  return sections.join("\\n");
}
`;

  // Ensure dist directory exists
  const distDir = path.dirname(OUTPUT_FILE);
  if (!fs.existsSync(distDir)) {
    fs.mkdirSync(distDir, { recursive: true });
  }

  fs.writeFileSync(OUTPUT_FILE, output);

  const stats = fs.statSync(OUTPUT_FILE);
  console.log(`‚úÖ Generated context file: ${OUTPUT_FILE}`);
  console.log(`üìä File size: ${(stats.size / 1024).toFixed(2)} KB\n`);
  console.log("üìã Next steps:");
  console.log("   1. Copy this file to your deployment system");
  console.log("   2. Import with: import { getOpenToolContext } from './opentool-context';");
  console.log("   3. Use in AI prompt: const context = getOpenToolContext();\n");
}

main();
